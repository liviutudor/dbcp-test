/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package liv.tudor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {

  private static final int N_THREADS = 4;

  private DatabaseConnPool databaseConnPool = new DatabaseConnPool();
  private Timer timer = new Timer("liv_testing", true);
  private ExecutorService service = Executors.newFixedThreadPool(N_THREADS);

  public String getGreeting() {
    return "Hello world.";
  }

  public static void main(String[] args) {
    try {
      App app = new App();
      app.go();
    } catch (Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
  }

  void go() throws Exception {
    ConnectionSettings settings = new PostgresConnectionSettings();
    settings.setHost("localhost");
    settings.setUsername("dbcp_test");
    settings.setPassword("dbcp_test");
    settings.setDatabase("dbcp_test");
    settings.setMaxPoolSize(10);
    settings.setMaxWaitMillis(-1);
    settings.setTimeBetweenEvictionRunsMillis(30);
    settings.setRemoveAbandonedTimeout(60);

    databaseConnPool.setConnectionSettings(settings);

    System.out.println("Starting");
    timer.scheduleAtFixedRate(new TimerTask() {
      @Override
      public void run() {
        for (int i = 0; i < N_THREADS; i++) {
          service.submit(() -> {
            try (Connection con = databaseConnPool.getConnection()) {
              PreparedStatement pstmt = con.prepareStatement("SELECT NOW();");
              pstmt.execute();
              ResultSet rs = pstmt.getResultSet();
              rs.next();
              System.out.println("Time" + rs.getDate(1));
              rs.close();
              pstmt.close();
            } catch (Exception e) {
              e.printStackTrace();
            }
          });
        }
      }
    }, 0, 30_000);
    TimeUnit.MINUTES.sleep(10);
  }
}
